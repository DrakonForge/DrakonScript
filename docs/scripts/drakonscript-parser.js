/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function () {
    var o = function (k, v, o, l) { for(o = o || {}, l = k.length; l--; o[k[l]] = v); return o }, $V0 = [10, 14, 16], $V1 = [2, 5], $V2 = [1, 15], $V3 = [1, 16], $V4 = [1, 27], $V5 = [1, 35], $V6 = [1, 29], $V7 = [1, 28], $V8 = [1, 31], $V9 = [1, 32], $Va = [1, 33], $Vb = [1, 34], $Vc = [1, 36], $Vd = [10, 20], $Ve = [1, 39], $Vf = [1, 40], $Vg = [10, 14, 16, 23, 27, 47, 50, 51, 60, 61, 76, 77], $Vh = [1, 41], $Vi = [1, 42], $Vj = [1, 43], $Vk = [10, 14, 16, 23, 27, 47, 50, 51, 60, 61, 73, 74, 75, 76, 77], $Vl = [2, 64], $Vm = [2, 78], $Vn = [10, 14, 16, 17, 23, 27, 30, 31, 32, 33, 34, 47, 50, 51, 60, 61, 73, 74, 75, 76, 77, 82], $Vo = [23, 27, 50], $Vp = [1, 77], $Vq = [2, 14], $Vr = [1, 70], $Vs = [1, 71], $Vt = [1, 72], $Vu = [1, 74], $Vv = [1, 75], $Vw = [1, 76], $Vx = [23, 27], $Vy = [2, 88], $Vz = [10, 16, 17, 23, 27, 30, 31, 32, 33, 34, 47, 50, 51, 60, 61, 82], $VA = [10, 16, 17, 23, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 82], $VB = [1, 102], $VC = [10, 16, 47, 51, 60, 61], $VD = [2, 37], $VE = [23, 27, 82], $VF = [1, 128], $VG = [1, 127], $VH = [1, 129], $VI = [1, 130], $VJ = [1, 131], $VK = [27, 50], $VL = [48, 50, 64], $VM = [1, 174], $VN = [1, 175], $VO = [50, 64], $VP = [27, 48, 50, 64];
    var parser = {
        trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "Speechbank": 3, "Group": 4, "EOF": 5, "group": 6, "Id": 7, "{": 8, "GroupDefs": 9, "}": 10, "extends": 11, "preset": 12, "GroupDef": 13, "category": 14, "CatDefs": 15, "Symbol": 16, "=": 17, "Exp": 18, "CatDef": 19, "rule": 20, "(": 21, "CriteriaOrEmpty": 22, ")": 23, "RuleDefs": 24, "Criteria": 25, "Criterion": 26, ",": 27, "Val": 28, "PValList": 29, "!=": 30, ">": 31, "<": 32, ">=": 33, "<=": 34, "TId": 35, "exists": 36, "empty": 37, "nonempty": 38, "includes": 39, "excludes": 40, "dummy": 41, "Integer": 42, "fail": 43, "Number": 44, "!": 45, "RuleDef": 46, "lines": 47, "[": 48, "Lines": 49, "]": 50, "set": 51, "ValOrList": 52, "+=": 53, "-=": 54, "*=": 55, "/=": 56, "%=": 57, "++": 58, "--": 59, "remove": 60, "invert": 61, "Line": 62, "Line1": 63, "String": 64, "Line1s": 65, "Exp3": 66, "Context": 67, "true": 68, "false": 69, "Exp2": 70, "ExpsOrEmpty": 71, "Exp1": 72, "*": 73, "/": 74, "%": 75, "+": 76, "-": 77, "Exps": 78, ".": 79, "Vals": 80, "PVals": 81, "|": 82, "ValList": 83, "Float": 84, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 6: "group", 7: "Id", 8: "{", 10: "}", 11: "extends", 12: "preset", 14: "category", 16: "Symbol", 17: "=", 20: "rule", 21: "(", 23: ")", 27: ",", 30: "!=", 31: ">", 32: "<", 33: ">=", 34: "<=", 36: "exists", 37: "empty", 38: "nonempty", 39: "includes", 40: "excludes", 41: "dummy", 42: "Integer", 43: "fail", 45: "!", 47: "lines", 48: "[", 50: "]", 51: "set", 53: "+=", 54: "-=", 55: "*=", 56: "/=", 57: "%=", 58: "++", 59: "--", 60: "remove", 61: "invert", 64: "String", 67: "Context", 68: "true", 69: "false", 73: "*", 74: "/", 75: "%", 76: "+", 77: "-", 79: ".", 82: "|", 84: "Float" },
        productions_: [0, [3, 2], [4, 5], [4, 7], [4, 4], [9, 0], [9, 2], [13, 5], [13, 3], [15, 0], [15, 2], [19, 7], [19, 8], [19, 5], [22, 0], [22, 1], [25, 1], [25, 3], [26, 1], [26, 3], [26, 3], [26, 3], [26, 3], [26, 3], [26, 3], [26, 5], [26, 5], [26, 5], [26, 5], [26, 2], [26, 2], [26, 2], [26, 3], [26, 3], [26, 2], [26, 2], [26, 2], [24, 0], [24, 2], [46, 5], [46, 3], [46, 4], [46, 4], [46, 4], [46, 4], [46, 4], [46, 4], [46, 3], [46, 3], [46, 3], [46, 3], [46, 2], [46, 2], [49, 0], [49, 2], [63, 1], [63, 2], [65, 0], [65, 2], [62, 1], [62, 3], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [70, 1], [70, 4], [70, 3], [70, 2], [72, 1], [72, 3], [72, 3], [72, 3], [18, 1], [18, 3], [18, 3], [71, 0], [71, 1], [78, 1], [78, 3], [35, 1], [35, 3], [28, 1], [28, 1], [28, 1], [28, 1], [28, 1], [80, 1], [80, 3], [81, 1], [81, 3], [83, 3], [52, 1], [52, 1], [29, 1], [29, 1], [44, 1], [44, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch(yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                    this.$ = { "id": $$[$0 - 3], "defs": $$[$0 - 1] };
                    break;
                case 3:
                    this.$ = { "id": $$[$0 - 5], "parent": $$[$0 - 3], "defs": $$[$0 - 1] };
                    break;
                case 4:
                    this.$ = { "id": "preset", "defs": $$[$0 - 1] };
                    break;
                case 5: case 9: case 14: case 37: case 53: case 57: case 78:
                    this.$ = [];
                    break;
                case 6: case 10:
                    $$[$0 - 1].push($$[$0]); this.$ = $$[$0 - 1];
                    break;
                case 7:
                    this.$ = { "type": "category", "name": $$[$0 - 3], "defs": $$[$0 - 1] };
                    break;
                case 8: case 40:
                    this.$ = { "type": "symbol", "name": $$[$0 - 2], "exp": $$[$0] };
                    break;
                case 11:
                    this.$ = { "type": "rule", "criteria": $$[$0 - 4], "defs": $$[$0 - 1] }
                    break;
                case 12:
                    this.$ = { "type": "rule", "name": $$[$0 - 6], "criteria": $$[$0 - 4], "defs": $$[$0 - 1] }
                    break;
                case 13:
                    this.$ = { "type": "rule", "name": $$[$0 - 3], "criteria": $$[$0 - 1] }
                    break;
                case 15: case 55: case 59: case 61: case 62: case 67: case 71: case 75: case 79: case 84: case 85: case 88: case 94: case 95: case 96: case 97:
                    this.$ = $$[$0];
                    break;
                case 16:
                    this.$ = [$$[$0]]
                    break;
                case 17: case 90: case 92:
                    $$[$0 - 2].push($$[$0]); this.$ = $$[$0 - 2];
                    break;
                case 18:
                    this.$ = { "type": "preset", "args": [$$[$0]] };
                    break;
                case 19:
                    this.$ = { "type": "eq", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 20:
                    this.$ = { "type": "neq", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 21:
                    this.$ = { "type": "gt", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 22:
                    this.$ = { "type": "lt", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 23:
                    this.$ = { "type": "ge", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 24:
                    this.$ = { "type": "le", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 25:
                    this.$ = { "type": "le_le", "args": [$$[$0 - 4], $$[$0 - 2], $$[$0]] };
                    break;
                case 26:
                    this.$ = { "type": "lt_le", "args": [$$[$0 - 4], $$[$0 - 2], $$[$0]] };
                    break;
                case 27:
                    this.$ = { "type": "le_lt", "args": [$$[$0 - 4], $$[$0 - 2], $$[$0]] };
                    break;
                case 28:
                    this.$ = { "type": "lt_lt", "args": [$$[$0 - 4], $$[$0 - 2], $$[$0]] };
                    break;
                case 29:
                    this.$ = { "type": "exists", "args": [$$[$0 - 1]] };
                    break;
                case 30:
                    this.$ = { "type": "empty", "args": [$$[$0 - 1]] };
                    break;
                case 31:
                    this.$ = { "type": "nonempty", "args": [$$[$0 - 1]] };
                    break;
                case 32:
                    this.$ = { "type": "includes", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 33:
                    this.$ = { "type": "excludes", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 34:
                    this.$ = { "type": "dummy", "args": [$$[$0]] };
                    break;
                case 35:
                    this.$ = { "type": "fail", "args": [$$[$0]] };
                    break;
                case 36:
                    this.$ = { "type": "negate", "args": [$$[$0]] };
                    break;
                case 38: case 54: case 58:
                    $$[$0 - 1].push($$[$0]); this.$ = $$[$0 - 1];
                    break;
                case 39:
                    this.$ = { "type": "lines", "lines": $$[$0 - 1] };
                    break;
                case 41:
                    this.$ = { "type": "action", "op": "set", "context": $$[$0 - 2], "value": $$[$0] };
                    break;
                case 42:
                    this.$ = { "type": "action", "op": "add", "context": $$[$0 - 2], "value": $$[$0] };
                    break;
                case 43:
                    this.$ = { "type": "action", "op": "sub", "context": $$[$0 - 2], "value": $$[$0] };
                    break;
                case 44:
                    this.$ = { "type": "action", "op": "mult", "context": $$[$0 - 2], "value": $$[$0] };
                    break;
                case 45:
                    this.$ = { "type": "action", "op": "div", "context": $$[$0 - 2], "value": $$[$0] };
                    break;
                case 46:
                    this.$ = { "type": "action", "op": "mod", "context": $$[$0 - 2], "value": $$[$0] };
                    break;
                case 47:
                    this.$ = { "type": "action", "op": "add", "context": $$[$0], "value": 1 };
                    break;
                case 48:
                    this.$ = { "type": "action", "op": "sub", "context": $$[$0], "value": 1 };
                    break;
                case 49:
                    this.$ = { "type": "action", "op": "add", "context": $$[$0 - 1], "value": 1 };
                    break;
                case 50:
                    this.$ = { "type": "action", "op": "sub", "context": $$[$0 - 1], "value": 1 };
                    break;
                case 51:
                    this.$ = { "type": "action", "op": "remove", "context": $$[$0] };
                    break;
                case 52:
                    this.$ = { "type": "action", "op": "invert", "context": $$[$0] };
                    break;
                case 56: case 60: case 69: case 93:
                    this.$ = $$[$0 - 1];
                    break;
                case 63:
                    let i = $$[$0].indexOf('.'); if(i > -1) { this.$ = { "table": $$[$0].substring(0, i), "context": $$[$0].substring(i + 1) }; } else { this.$ = { "context": $$[$0] }; }
                    break;
                case 64:
                    this.$ = "@" + $$[$0];
                    break;
                case 65: case 86:
                    this.$ = true;
                    break;
                case 66: case 87:
                    this.$ = false;
                    break;
                case 68:
                    this.$ = { "function": $$[$0 - 3], "args": $$[$0 - 1] };
                    break;
                case 70:
                    this.$ = { "function": "negate", "args": [$$[$0]] }
                    break;
                case 72:
                    this.$ = { "function": "mult", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 73:
                    this.$ = { "function": "div", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 74:
                    this.$ = { "function": "mod", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 76:
                    this.$ = { "function": "add", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 77:
                    this.$ = { "function": "sub", "args": [$$[$0 - 2], $$[$0]] };
                    break;
                case 80: case 89: case 91:
                    this.$ = [$$[$0]];
                    break;
                case 81:
                    $$[$0 - 2].push($$[$0]); this.$ = $$[$0 - 2];
                    break;
                case 82:
                    this.$ = { "context": $$[$0] };
                    break;
                case 83:
                    this.$ = { "table": $$[$0 - 2], "context": $$[$0] };
                    break;
                case 98: case 99:
                    this.$ = Number(yytext);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: [1, 3], 12: [1, 4] }, { 1: [3] }, { 5: [1, 5] }, { 7: [1, 6] }, { 8: [1, 7] }, { 1: [2, 1] }, { 8: [1, 8], 11: [1, 9] }, o($V0, $V1, { 9: 10 }), o($V0, $V1, { 9: 11 }), { 7: [1, 12] }, { 10: [1, 13], 13: 14, 14: $V2, 16: $V3 }, { 10: [1, 17], 13: 14, 14: $V2, 16: $V3 }, { 8: [1, 18] }, { 5: [2, 4] }, o($V0, [2, 6]), { 7: [1, 19] }, { 17: [1, 20] }, { 5: [2, 2] }, o($V0, $V1, { 9: 21 }), { 8: [1, 22] }, { 16: $V4, 18: 23, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 25, 72: 24, 84: $Vc }, { 10: [1, 37], 13: 14, 14: $V2, 16: $V3 }, o($Vd, [2, 9], { 15: 38 }), o($V0, [2, 8], { 76: $Ve, 77: $Vf }), o($Vg, [2, 75], { 73: $Vh, 74: $Vi, 75: $Vj }), o($Vk, [2, 71]), o($Vk, [2, 67]), o($Vk, $Vl, { 21: [1, 44] }), { 16: $V4, 18: 47, 42: $V5, 44: 30, 45: $V6, 48: $V7, 50: $Vm, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 25, 71: 45, 72: 24, 78: 46, 84: $Vc }, { 16: $V4, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 48, 84: $Vc }, o($Vk, [2, 61]), o($Vk, [2, 62]), o($Vk, [2, 63]), o($Vk, [2, 65]), o($Vk, [2, 66]), o($Vn, [2, 98]), o($Vn, [2, 99]), { 5: [2, 3] }, { 10: [1, 49], 19: 50, 20: [1, 51] }, { 16: $V4, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 25, 72: 52, 84: $Vc }, { 16: $V4, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 25, 72: 53, 84: $Vc }, { 16: $V4, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 54, 84: $Vc }, { 16: $V4, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 55, 84: $Vc }, { 16: [1, 57], 42: $V5, 44: 30, 64: $V8, 66: 56, 67: $V9, 68: $Va, 69: $Vb, 84: $Vc }, { 16: $V4, 18: 47, 23: $Vm, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 25, 71: 58, 72: 24, 78: 46, 84: $Vc }, { 50: [1, 59] }, o([23, 50], [2, 79], { 27: [1, 60] }), o($Vo, [2, 80], { 76: $Ve, 77: $Vf }), o($Vk, [2, 70]), o($V0, [2, 7]), o($Vd, [2, 10]), { 7: [1, 62], 21: [1, 61] }, o($Vg, [2, 76], { 73: $Vh, 74: $Vi, 75: $Vj }), o($Vg, [2, 77], { 73: $Vh, 74: $Vi, 75: $Vj }), o($Vk, [2, 72]), o($Vk, [2, 73]), o($Vk, [2, 74]), o($Vk, $Vl), { 23: [1, 63] }, o($Vk, [2, 69]), { 16: $V4, 18: 64, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 25, 72: 24, 84: $Vc }, { 7: $Vp, 22: 65, 23: $Vq, 25: 66, 26: 67, 28: 68, 35: 69, 41: $Vr, 42: $V5, 43: $Vs, 44: 73, 45: $Vt, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 21: [1, 78] }, o($Vk, [2, 68]), o($Vo, [2, 81], { 76: $Ve, 77: $Vf }), { 23: [1, 79] }, { 23: [2, 15], 27: [1, 80] }, o($Vx, [2, 16]), o($Vx, [2, 18], { 17: [1, 81], 30: [1, 82], 31: [1, 83], 32: [1, 84], 33: [1, 85], 34: [1, 86] }), o([17, 23, 27, 30, 31, 32, 33, 34], $Vy, { 36: [1, 87], 37: [1, 88], 38: [1, 89], 39: [1, 90], 40: [1, 91] }), { 42: [1, 92] }, { 42: $V5, 44: 93, 84: $Vc }, { 7: $Vp, 26: 94, 28: 68, 35: 69, 41: $Vr, 42: $V5, 43: $Vs, 44: 73, 45: $Vt, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, o($Vz, [2, 84]), o($Vz, [2, 85]), o($Vz, [2, 86]), o($Vz, [2, 87]), o($VA, [2, 82], { 79: [1, 95] }), { 7: $Vp, 22: 96, 23: $Vq, 25: 66, 26: 67, 28: 68, 35: 69, 41: $Vr, 42: $V5, 43: $Vs, 44: 73, 45: $Vt, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 8: [1, 97] }, { 7: $Vp, 26: 98, 28: 68, 35: 69, 41: $Vr, 42: $V5, 43: $Vs, 44: 73, 45: $Vt, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 103, 29: 99, 35: 104, 42: $V5, 44: 73, 48: $VB, 64: $Vu, 68: $Vv, 69: $Vw, 81: 101, 83: 100, 84: $Vc }, { 7: $Vp, 28: 103, 29: 105, 35: 104, 42: $V5, 44: 73, 48: $VB, 64: $Vu, 68: $Vv, 69: $Vw, 81: 101, 83: 100, 84: $Vc }, { 7: $Vp, 28: 106, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 107, 35: 108, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 109, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 110, 35: 111, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, o($Vx, [2, 29]), o($Vx, [2, 30]), o($Vx, [2, 31]), { 7: $Vp, 28: 103, 29: 112, 35: 104, 42: $V5, 44: 73, 48: $VB, 64: $Vu, 68: $Vv, 69: $Vw, 81: 101, 83: 100, 84: $Vc }, { 7: $Vp, 28: 103, 29: 113, 35: 104, 42: $V5, 44: 73, 48: $VB, 64: $Vu, 68: $Vv, 69: $Vw, 81: 101, 83: 100, 84: $Vc }, o($Vx, [2, 34]), o($Vx, [2, 35]), o($Vx, [2, 36]), { 7: [1, 114] }, { 23: [1, 115] }, o($VC, $VD, { 24: 116 }), o($Vx, [2, 17]), o($Vx, [2, 19]), o($Vx, [2, 96]), o($Vx, [2, 97], { 82: [1, 117] }), { 7: $Vp, 28: 119, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 80: 118, 84: $Vc }, o($VE, [2, 91]), o([10, 16, 23, 27, 47, 50, 51, 60, 61, 82], $Vy), o($Vx, [2, 20]), o($Vx, [2, 21]), o($Vx, [2, 22]), o($Vx, $Vy, { 32: [1, 121], 34: [1, 120] }), o($Vx, [2, 23]), o($Vx, [2, 24]), o($Vx, $Vy, { 32: [1, 123], 34: [1, 122] }), o($Vx, [2, 32]), o($Vx, [2, 33]), o($VA, [2, 83]), o($Vd, [2, 13], { 8: [1, 124] }), { 10: [1, 125], 16: $VF, 46: 126, 47: $VG, 51: $VH, 60: $VI, 61: $VJ }, { 7: $Vp, 28: 132, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 27: [1, 134], 50: [1, 133] }, o($VK, [2, 89]), { 7: $Vp, 28: 135, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 136, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 137, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 138, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, o($VC, $VD, { 24: 139 }), o($Vd, [2, 11]), o($VC, [2, 38]), { 17: [1, 140] }, { 17: [1, 141] }, { 7: $Vp, 35: 142, 58: [1, 143], 59: [1, 144] }, { 7: $Vp, 35: 145 }, { 7: $Vp, 35: 146 }, o($VE, [2, 92]), o([10, 16, 23, 27, 47, 51, 60, 61], [2, 93]), { 7: $Vp, 28: 147, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, o($Vx, [2, 26]), o($Vx, [2, 28]), o($Vx, [2, 25]), o($Vx, [2, 27]), { 10: [1, 148], 16: $VF, 46: 126, 47: $VG, 51: $VH, 60: $VI, 61: $VJ }, { 48: [1, 149] }, { 16: $V4, 18: 150, 42: $V5, 44: 30, 45: $V6, 48: $V7, 64: $V8, 66: 26, 67: $V9, 68: $Va, 69: $Vb, 70: 25, 72: 24, 84: $Vc }, { 17: [1, 151], 53: [1, 152], 54: [1, 153], 55: [1, 154], 56: [1, 155], 57: [1, 156], 58: [1, 157], 59: [1, 158] }, { 7: $Vp, 35: 159 }, { 7: $Vp, 35: 160 }, o($VC, [2, 51]), o($VC, [2, 52]), o($VK, [2, 90]), o($Vd, [2, 12]), o($VL, [2, 53], { 49: 161 }), o($VC, [2, 40], { 76: $Ve, 77: $Vf }), { 7: $Vp, 28: 163, 35: 104, 42: $V5, 44: 73, 48: $VB, 52: 162, 64: $Vu, 68: $Vv, 69: $Vw, 83: 164, 84: $Vc }, { 7: $Vp, 28: 165, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 166, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 167, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 168, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, { 7: $Vp, 28: 169, 35: 104, 42: $V5, 44: 73, 64: $Vu, 68: $Vv, 69: $Vw, 84: $Vc }, o($VC, [2, 49]), o($VC, [2, 50]), o($VC, [2, 47]), o($VC, [2, 48]), { 48: [1, 173], 50: [1, 170], 62: 171, 63: 172, 64: $VM }, o($VC, [2, 41]), o($VC, [2, 94]), o($VC, [2, 95]), o($VC, [2, 42]), o($VC, [2, 43]), o($VC, [2, 44]), o($VC, [2, 45]), o($VC, [2, 46]), o($VC, [2, 39]), o($VL, [2, 54]), o($VL, [2, 59], { 27: $VN }), o($VO, [2, 57], { 65: 176 }), o($VP, [2, 55]), o($VP, [2, 56]), { 50: [1, 177], 63: 178, 64: $VM }, o($VL, [2, 60]), o($VO, [2, 58], { 27: $VN })],
        defaultActions: { 5: [2, 1], 13: [2, 4], 17: [2, 2], 37: [2, 3] },
        parseError: function parseError(str, hash) {
            if(hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for(var k in this.yy) {
                if(Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if(typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if(typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack:
            var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                if(typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while(true) {
                state = stack[stack.length - 1];
                if(this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if(symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if(typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for(p in table[state]) {
                        if(this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if(lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if(action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch(action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if(!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if(recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if(ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if(typeof r !== 'undefined') {
                            return r;
                        }
                        if(len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if(this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if(this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if(lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if(this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if(lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                        + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };

                if(this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if(this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if(next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if(this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if(this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if(lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if(this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if(this.done && this._input) {
                    this.done = false;
                }
                if(token) {
                    return token;
                } else if(this._backtrack) {
                    // recover context
                    for(var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function () {
                if(this.done) {
                    return this.EOF;
                }
                if(!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if(!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for(var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if(tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if(this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if(token !== false) {
                                return token;
                            } else if(this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if(!this.options.flex) {
                            break;
                        }
                    }
                }
                if(match) {
                    token = this.test_match(match, rules[index]);
                    if(token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if(this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if(r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if(n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if(this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if(n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch($avoiding_name_collisions) {
                    case 0:/* skip single-line comments */
                        break;
                    case 1:/* skip multi-line comments */
                        break;
                    case 2:/* skip whitespace */
                        break;
                    case 3: return 6;
                        break;
                    case 4: return 12;
                        break;
                    case 5: return 11;
                        break;
                    case 6: return 14;
                        break;
                    case 7: return 20;
                        break;
                    case 8: return 47;
                        break;
                    case 9: return 51;
                        break;
                    case 10: return 60;
                        break;
                    case 11: return 'insert';
                        break;
                    case 12: return 36;
                        break;
                    case 13: return 37;
                        break;
                    case 14: return 38;
                        break;
                    case 15: return 39;
                        break;
                    case 16: return 40;
                        break;
                    case 17: return 41;
                        break;
                    case 18: return 43;
                        break;
                    case 19: return 68;
                        break;
                    case 20: return 69;
                        break;
                    case 21: return 7;
                        break;
                    case 22: yy_.yytext = yy_.yytext.slice(1); return 16;
                        break;
                    case 23: yy_.yytext = yy_.yytext.slice(1); return 67;
                        break;
                    case 24: return 84;
                        break;
                    case 25: return 42
                        break;
                    case 26: yy_.yytext = yy_.yytext.slice(1, -1); return 64
                        break;
                    case 27: return 5;
                        break;
                    case 28: return 30;
                        break;
                    case 29: return 53;
                        break;
                    case 30: return 54;
                        break;
                    case 31: return 56;
                        break;
                    case 32: return 55;
                        break;
                    case 33: return 57;
                        break;
                    case 34: return 33;
                        break;
                    case 35: return 34;
                        break;
                    case 36: return 58;
                        break;
                    case 37: return 59;
                        break;
                    case 38: return 73;
                        break;
                    case 39: return 74;
                        break;
                    case 40: return 77;
                        break;
                    case 41: return 76;
                        break;
                    case 42: return 17;
                        break;
                    case 43: return 31;
                        break;
                    case 44: return 32;
                        break;
                    case 45: return 27;
                        break;
                    case 46: return 79;
                        break;
                    case 47: return 82;
                        break;
                    case 48: return 45;
                        break;
                    case 49: return 21;
                        break;
                    case 50: return 23;
                        break;
                    case 51: return 8;
                        break;
                    case 52: return 10;
                        break;
                    case 53: return 48;
                        break;
                    case 54: return 50;
                        break;
                }
            },
            rules: [/^(?:\/\/([^\r^\n])*)/, /^(?:\/[*]([^*]|([*][^/]))*[*]+\/)/, /^(?:\s+)/, /^(?:group\b)/, /^(?:preset\b)/, /^(?:extends\b)/, /^(?:category\b)/, /^(?:rule\b)/, /^(?:lines\b)/, /^(?:set\b)/, /^(?:remove\b)/, /^(?:insert\b)/, /^(?:exists\b)/, /^(?:empty\b)/, /^(?:nonempty\b)/, /^(?:includes\b)/, /^(?:excludes\b)/, /^(?:dummy\b)/, /^(?:fail\b)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:[a-z][a-zA-Z_0-9]*)/, /^(?:@[a-z][a-zA-Z_0-9]*)/, /^(?:#[a-z][a-zA-Z_.0-9]*)/, /^(?:(-)?(0|[1-9][0-9]*)\.[0-9]+)/, /^(?:(-)?(0|[1-9][0-9]*))/, /^(?:"[^"]+")/, /^(?:$)/, /^(?:!=)/, /^(?:\+=)/, /^(?:-=)/, /^(?:\/=)/, /^(?:\*=)/, /^(?:%=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+\+)/, /^(?:--)/, /^(?:\*)/, /^(?:\/)/, /^(?:-)/, /^(?:\+)/, /^(?:=)/, /^(?:>)/, /^(?:<)/, /^(?:,)/, /^(?:\.)/, /^(?:\|)/, /^(?:!)/, /^(?:\()/, /^(?:\))/, /^(?:\{)/, /^(?:\})/, /^(?:\[)/, /^(?:\])/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser; parser.Parser = Parser;
    return new Parser;
})();


if(typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () { return parser.parse.apply(parser, arguments); };
    exports.main = function commonjsMain(args) {
        if(!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if(typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
export { parser };